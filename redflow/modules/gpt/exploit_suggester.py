#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Exploit Suggester for RedFlow
Advanced exploit recommendation engine
"""

import os
import sys
import logging
from typing import Dict, List, Any, Optional, Tuple
import json

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from redflow.utils.config import Config
from redflow.modules.gpt.exploit_advisor import ExploitAdvisor, ExploitInfo
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.markdown import Markdown

class ExploitSuggester:
    """
    Main interface for suggesting exploits for vulnerabilities
    """
    
    def __init__(self, config: Config, logger: logging.Logger):
        """
        Initialize the exploit suggester
        
        Args:
            config: RedFlow configuration
            logger: Logger instance
        """
        self.config = config
        self.logger = logger
        self.console = Console()
        self.advisor = ExploitAdvisor(config, logger, self.console)
        
    def suggest_exploits(self, target_info: Dict[str, Any]) -> Dict[str, List[Dict[str, Any]]]:
        """
        Suggest exploits for the target based on open ports and service information
        
        Args:
            target_info: Dictionary containing target information with open ports
            
        Returns:
            Dictionary of suggested exploits per service
        """
        self.logger.info("Starting exploit suggestion process")
        
        # Check if target_info is valid
        if not target_info or 'ports' not in target_info or not target_info['ports']:
            self.logger.warning("No ports found in target information")
            return {}
            
        # Extract target details
        target_ip = target_info.get('ip', 'Unknown')
        target_domain = target_info.get('domain', '')
        
        self.console.print(f"\n[bold cyan]== RedFlow Exploit Advisor ==[/bold cyan]")
        self.console.print(f"Target: [bold]{target_ip}[/bold] {f'({target_domain})' if target_domain else ''}")
        
        # Dictionary to store results
        suggested_exploits = {}
        
        # Process each port
        for port_num, port_info in target_info['ports'].items():
            # Skip ports that are not open
            if port_info.get('state', '').lower() != 'open':
                continue
                
            service_name = port_info.get('service', '').lower()
            version = port_info.get('version', '')
            
            if not service_name:
                continue
                
            self.logger.info(f"Looking for exploits for {service_name} {version} on port {port_num}")
            
            # Get exploits for service
            exploits = self.advisor.find_exploits_for_service(service_name, version)
            
            if exploits:
                self.logger.info(f"Found {len(exploits)} potential exploits for {service_name}")
                
                # Set up a table to display exploits
                table = Table(title=f"Potential Exploits for {service_name} {version} on port {port_num}")
                table.add_column("#", style="white", justify="right")
                table.add_column("Exploit Name", style="cyan")
                table.add_column("Path", style="green")
                table.add_column("CVE", style="yellow")
                table.add_column("Analysis", style="magenta")
                
                # Store exploits for this service
                service_exploits = []
                
                # Maximum number of exploits to analyze with GPT
                max_gpt_analysis = 3 if self.config.use_gpt else 0
                analyzed_count = 0
                
                for i, exploit in enumerate(exploits[:10], 1):  # Limit to top 10 exploits
                    # Convert exploit to dictionary for output
                    exploit_dict = exploit.to_dict()
                    
                    # Get GPT analysis for top exploits if use_gpt is enabled
                    gpt_analysis = None
                    if self.config.use_gpt and analyzed_count < max_gpt_analysis:
                        self.logger.info(f"Analyzing exploit {exploit.title} with GPT")
                        gpt_analysis = self.advisor.analyze_exploit_with_gpt(
                            exploit, service_name, version
                        )
                        analyzed_count += 1
                        
                    exploit_dict["gpt_analysis"] = gpt_analysis
                    service_exploits.append(exploit_dict)
                    
                    # Add to table
                    assessment = "GPT Analysis Available" if gpt_analysis else "Not Analyzed"
                    table.add_row(
                        str(i),
                        exploit.title,
                        os.path.basename(exploit.path),
                        exploit.cve or "Unknown",
                        assessment
                    )
                
                # Store results
                suggested_exploits[f"{service_name}:{port_num}"] = service_exploits
                
                # Display table
                self.console.print(table)
                
                # Offer to run or analyze an exploit immediately
                self.console.print("\n[bold cyan]Would you like to analyze or run one of these exploits? (y/n)[/bold cyan]")
                run_exploit = input("> ").strip().lower().startswith("y")
                
                if run_exploit:
                    # Ask which exploit to run
                    self.console.print("[bold cyan]Enter the number of the exploit you want to work with:[/bold cyan]")
                    exploit_num = input("> ").strip()
                    
                    try:
                        exploit_idx = int(exploit_num) - 1
                        if 0 <= exploit_idx < len(service_exploits):
                            selected_exploit = service_exploits[exploit_idx]
                            
                            # Show detailed GPT analysis if available
                            if selected_exploit.get("gpt_analysis"):
                                self.console.print(
                                    Panel(
                                        Markdown(selected_exploit["gpt_analysis"]),
                                        title=f"GPT Analysis: {selected_exploit['title']}",
                                        border_style="blue"
                                    )
                                )
                            
                            # Ask what to do with the exploit
                            self.console.print("\n[bold cyan]What would you like to do?[/bold cyan]")
                            self.console.print("[1] View exploit code")
                            self.console.print("[2] Run with Metasploit (if applicable)")
                            self.console.print("[3] Manual exploitation guidance")
                            self.console.print("[4] Return to main menu")
                            
                            action = input("> ").strip()
                            
                            if action == "1":
                                # View exploit code
                                self._display_exploit_code(selected_exploit["path"])
                            elif action == "2" and selected_exploit.get("metasploit_path"):
                                # Run with Metasploit
                                resource_file = self.advisor.generate_metasploit_resource(
                                    selected_exploit["metasploit_path"],
                                    target_ip,
                                    int(port_num)
                                )
                                if resource_file:
                                    self.advisor.run_metasploit_resource(resource_file)
                            elif action == "3":
                                # Show manual exploitation guidance
                                self._show_manual_guidance(selected_exploit, target_ip, port_num)
                    except ValueError:
                        self.console.print("[bold red]Invalid selection.[/bold red]")
            else:
                self.logger.info(f"No exploits found for {service_name} {version}")
                self.console.print(f"[yellow]No exploits found for {service_name} {version}[/yellow]")
        
        return suggested_exploits
    
    def _display_exploit_code(self, path: str) -> None:
        """
        Display the code of an exploit file
        
        Args:
            path: Path to the exploit file
        """
        self.logger.info(f"Displaying exploit code for {path}")
        
        if not os.path.exists(path):
            self.console.print(f"[bold red]Exploit file not found: {path}[/bold red]")
            return
            
        try:
            with open(path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                
            self.console.print(Panel(content, title=f"Exploit Code: {os.path.basename(path)}", border_style="green"))
        except Exception as e:
            self.logger.error(f"Error reading exploit file: {e}")
            self.console.print(f"[bold red]Error reading exploit file: {e}[/bold red]")
    
    def _show_manual_guidance(self, exploit: Dict[str, Any], target_ip: str, port: str) -> None:
        """
        Show manual exploitation guidance
        
        Args:
            exploit: Exploit information dictionary
            target_ip: Target IP address
            port: Target port
        """
        self.logger.info(f"Showing manual guidance for {exploit.get('title', 'Unknown exploit')}")
        
        # Create guidance based on file extension
        file_ext = exploit.get("file_ext", "").lower()
        file_name = os.path.basename(exploit.get("path", ""))
        
        guidance = f"""
# Manual Exploitation Guide for {exploit.get('title', 'Unknown exploit')}

## Target Information
- IP Address: {target_ip}
- Port: {port}
- Service: {exploit.get('service', 'Unknown')}

## Exploitation Steps

### 1. Navigate to the exploit location
```bash
cd {os.path.dirname(exploit.get('path', ''))}
```

"""
        
        # Add specific guidance based on file type
        if file_ext == ".py":
            guidance += f"""
### 2. Run the Python exploit
```bash
python3 {file_name} --target {target_ip} --port {port}
# or
python3 {file_name} -t {target_ip} -p {port}
```

### 3. Check for additional required parameters
```bash
python3 {file_name} --help
```
"""
        elif file_ext == ".rb" and exploit.get("metasploit_path"):
            guidance += f"""
### 2. Run with Metasploit
```bash
msfconsole -q
use {exploit.get('metasploit_path')}
set RHOSTS {target_ip}
set RPORT {port}
show options
# Fill in any required options
exploit
```
"""
        elif file_ext in [".c", ".cpp"]:
            guidance += f"""
### 2. Compile and run the exploit
```bash
gcc -o exploit {file_name}
./exploit {target_ip} {port}
```
"""
        else:
            guidance += f"""
### 2. Review the exploit file to determine how to run it
```bash
cat {file_name}
```

### 3. Execute the exploit according to its requirements
The exact command depends on the exploit type. Check the header comments for usage instructions.
"""
        
        self.console.print(Panel(Markdown(guidance), title="Manual Exploitation Guide", border_style="cyan", expand=False))
        
    def get_detailed_analysis(self, exploit: Dict[str, Any], target_info: Dict[str, Any]) -> None:
        """
        Get detailed analysis for a specific exploit
        
        Args:
            exploit: Exploit information dictionary
            target_info: Target information dictionary
        """
        self.logger.info(f"Getting detailed analysis for {exploit.get('title', 'Unknown exploit')}")
        
        # Convert dictionary back to ExploitInfo object
        exploit_info = ExploitInfo.from_dict(exploit)
        
        # Get service and version
        service_name = exploit.get('service', 'Unknown service')
        version = exploit.get('version', '')
        
        # Get GPT analysis
        analysis = self.advisor.analyze_exploit_with_gpt(exploit_info, service_name, version)
        
        if analysis:
            self.advisor.display_advice(analysis)
        else:
            self.console.print("[bold red]Could not get detailed analysis for this exploit[/bold red]")

if __name__ == "__main__":
    # Simple test code
    from redflow.utils.logger import get_logger
    
    config = Config()
    logger = get_logger("exploit_suggester", log_level=logging.INFO)
    
    suggester = ExploitSuggester(config, logger)
    
    # Test target info
    test_target = {
        "ip": "192.168.1.100",
        "domain": "example.com",
        "ports": {
            "21": {
                "service": "ftp",
                "version": "vsftpd 2.3.4",
                "state": "open"
            },
            "80": {
                "service": "http",
                "version": "Apache httpd 2.4.49",
                "state": "open"
            }
        }
    }
    
    # Run test
    suggester.suggest_exploits(test_target) 