#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Exploit Suggester for RedFlow
מנוע הצעת אקספלויטים עבור RedFlow
"""

import os
import sys
import logging
from typing import Dict, List, Any, Optional, Tuple
import json

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from redflow.utils.config import Config
from redflow.modules.gpt.exploit_advisor import ExploitAdvisor, ExploitInfo
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.markdown import Markdown

class ExploitSuggester:
    """
    Main interface for suggesting exploits for vulnerabilities
    ממשק ראשי להצעת אקספלויטים עבור פגיעויות
    """
    
    def __init__(self, config: Config, logger: logging.Logger):
        """
        Initialize the exploit suggester
        
        Args:
            config: RedFlow configuration
            logger: Logger instance
        """
        self.config = config
        self.logger = logger
        self.console = Console()
        self.advisor = ExploitAdvisor(config, logger, self.console)
        
    def suggest_exploits(self, target_info: Dict[str, Any]) -> Dict[str, List[Dict[str, Any]]]:
        """
        Suggest exploits for the target based on open ports and service information
        
        Args:
            target_info: Dictionary containing target information with open ports
            
        Returns:
            Dictionary of suggested exploits per service
        """
        self.logger.info("Starting exploit suggestion process")
        
        # Check if target_info is valid
        if not target_info or 'ports' not in target_info or not target_info['ports']:
            self.logger.warning("No ports found in target information")
            return {}
            
        # Extract target details
        target_ip = target_info.get('ip', 'Unknown')
        target_domain = target_info.get('domain', '')
        
        self.console.print(f"\n[bold cyan]== יועץ האקספלויטים של RedFlow ==[/bold cyan]")
        self.console.print(f"מטרה: [bold]{target_ip}[/bold] {f'({target_domain})' if target_domain else ''}")
        
        # Dictionary to store results
        suggested_exploits = {}
        
        # Process each port
        for port_num, port_info in target_info['ports'].items():
            # Skip ports that are not open
            if port_info.get('state', '').lower() != 'open':
                continue
                
            service_name = port_info.get('service', '').lower()
            version = port_info.get('version', '')
            
            if not service_name:
                continue
                
            self.logger.info(f"Looking for exploits for {service_name} {version} on port {port_num}")
            
            # Get exploits for service
            exploits = self.advisor.find_exploits_for_service(service_name, version)
            
            if exploits:
                self.logger.info(f"Found {len(exploits)} potential exploits for {service_name}")
                
                # Set up a table to display exploits
                table = Table(title=f"פוטנציאל ניצול עבור {service_name} {version} בפורט {port_num}")
                table.add_column("שם הניצול", style="cyan")
                table.add_column("נתיב", style="green")
                table.add_column("CVE", style="yellow")
                table.add_column("הערכה", style="magenta")
                
                # Store exploits for this service
                service_exploits = []
                
                # Maximum number of exploits to analyze with GPT
                max_gpt_analysis = 3 if self.config.use_gpt else 0
                analyzed_count = 0
                
                for exploit in exploits[:10]:  # Limit to top 10 exploits
                    # Convert exploit to dictionary for output
                    exploit_dict = exploit.to_dict()
                    
                    # Get GPT analysis for top exploits if use_gpt is enabled
                    gpt_analysis = None
                    if self.config.use_gpt and analyzed_count < max_gpt_analysis:
                        self.logger.info(f"Analyzing exploit {exploit.title} with GPT")
                        gpt_analysis = self.advisor.analyze_exploit_with_gpt(
                            exploit, service_name, version
                        )
                        analyzed_count += 1
                        
                    exploit_dict["gpt_analysis"] = gpt_analysis
                    service_exploits.append(exploit_dict)
                    
                    # Add to table
                    assessment = "GPT ניתוח זמין" if gpt_analysis else "לא נותח"
                    table.add_row(
                        exploit.title,
                        os.path.basename(exploit.path),
                        exploit.cve or "לא ידוע",
                        assessment
                    )
                
                # Store results
                suggested_exploits[f"{service_name}:{port_num}"] = service_exploits
                
                # Display table
                self.console.print(table)
                
                # Show GPT analysis for analyzed exploits
                if self.config.use_gpt:
                    for exploit in service_exploits:
                        if exploit.get("gpt_analysis"):
                            self.console.print(
                                Panel(
                                    Markdown(exploit["gpt_analysis"]),
                                    title=f"GPT ניתוח: {exploit['title']}",
                                    border_style="blue"
                                )
                            )
            else:
                self.logger.info(f"No exploits found for {service_name} {version}")
                self.console.print(f"[yellow]לא נמצאו ניצולים עבור {service_name} {version}[/yellow]")
        
        return suggested_exploits
    
    def get_detailed_analysis(self, exploit: Dict[str, Any], target_info: Dict[str, Any]) -> None:
        """
        Get detailed analysis for a specific exploit
        
        Args:
            exploit: Exploit information dictionary
            target_info: Target information dictionary
        """
        self.logger.info(f"Getting detailed analysis for {exploit.get('title', 'Unknown exploit')}")
        
        # Convert dictionary back to ExploitInfo object
        exploit_info = ExploitInfo.from_dict(exploit)
        
        # Get service and version
        service_name = exploit.get('service', 'Unknown service')
        version = exploit.get('version', '')
        
        # Get GPT analysis
        analysis = self.advisor.analyze_exploit_with_gpt(exploit_info, service_name, version)
        
        if analysis:
            self.advisor.display_advice(analysis)
        else:
            self.console.print("[bold red]לא ניתן לקבל ניתוח מפורט עבור הניצול[/bold red]")

if __name__ == "__main__":
    # Simple test code
    from redflow.utils.logger import get_logger
    
    config = Config()
    logger = get_logger("exploit_suggester", log_level=logging.INFO)
    
    suggester = ExploitSuggester(config, logger)
    
    # Test target info
    test_target = {
        "ip": "192.168.1.100",
        "domain": "example.com",
        "ports": {
            "21": {
                "service": "ftp",
                "version": "vsftpd 2.3.4",
                "state": "open"
            },
            "80": {
                "service": "http",
                "version": "Apache httpd 2.4.49",
                "state": "open"
            }
        }
    }
    
    # Test exploit suggestion
    results = suggester.suggest_exploits(test_target)
    
    # Save results to JSON
    with open("exploit_suggestions.json", "w") as f:
        json.dump(results, f, indent=2) 